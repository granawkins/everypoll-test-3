// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String?
  profileImage  String?
  googleId      String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  polls         Poll[]
  votes         Vote[]
}

// Poll model
model Poll {
  id            String   @id @default(uuid())
  question      String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isPublic      Boolean  @default(true)

  // Relationships
  creator       User     @relation(fields: [creatorId], references: [id])
  creatorId     String
  options       Option[]
  votes         Vote[]
  referencedBy  PollReference[] @relation("ReferencedPoll")
  references    PollReference[] @relation("ReferencingPoll")
}

// Poll option model
model Option {
  id            String   @id @default(uuid())
  text          String
  createdAt     DateTime @default(now())
  
  // Relationships
  poll          Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId        String
  votes         Vote[]
}

// Vote model
model Vote {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  
  // Relationships
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  poll          Poll     @relation(fields: [pollId], references: [id])
  pollId        String
  option        Option   @relation(fields: [optionId], references: [id])
  optionId      String

  // Each user can only vote once per poll
  @@unique([userId, pollId])
}

// Poll cross-reference model
model PollReference {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  
  // Relationships - a poll can reference other polls
  referencingPoll   Poll     @relation("ReferencingPoll", fields: [referencingPollId], references: [id])
  referencingPollId String
  referencedPoll    Poll     @relation("ReferencedPoll", fields: [referencedPollId], references: [id])
  referencedPollId  String

  // Prevent duplicate references
  @@unique([referencingPollId, referencedPollId])
}
